	#This code is based off of Peter Van Dam's 01a.mimpfinder_combine_to_putefflist_MetStop.py program
  #sc_prefix = 'contig_' or however you space your sequences
  #motiefje = 'TT[TA]TTGC..CCCACTG..'
  #motiefje_rc = '..CAGTGGG..GCAA[TA]AA'
  #datahandler = whatever you want to output your file as 
  #distance = 2500 , # of BP in sequence downstream of motif used for ORF prediction
  #mimpsequencesfile = where ever you want to store your mimps
  #infilename = infile name
  
  
  with open(infile, 'r') as file:
		to_examine=file.readlines()
		file.close()
	####


	datahandler_list = []
	nrofcompletemimps = 0
	complete_mimp_counter = 0
	nrofincompletemimps = 0
	open(mimpsequencesfile,'w').close()
	print '-'*20
	for seq_record in SeqIO.parse(infile, 'fasta', IUPAC.ambiguous_dna):
		print '// Analyzing \'%s\'... (%i bp long)' % (seq_record.description, len(seq_record))
		if str(sc_prefix) in seq_record.description:
			new_id = seq_record.description.split(sc_prefix)[1].split('_')[0]  #this splitting of '_' is necessary for SignalP in order to not skip all queries in datahandler3 (because their headers might contain '_').
			if ' ' in new_id: #if 'contig_xx' is not the last phrase in the fasta header, resulting in ne_id to become 'contig_xx whole shotgun sequencing bladiebla'
				new_id = new_id.split(' ')[0]
		else:
			print  '-'*20 + '\nThis supercontig prefix was not found; add supercontig prefix as 1st argument..!\n' + '-'*20
			quit()
		match = re.finditer(motiefje, str(seq_record.seq))
		match_rc = re.finditer(motiefje_rc, str(seq_record.seq))
		ir_dict = {}
		region_to_find_TIR_mate =''
		i=0
		n=0
		for m in match:
			if m.end()+distance >= len(seq_record): #ensure that no value bigger than the supercontig length will arise
				end_pos_after_mimp = len(seq_record)
			else:
				end_pos_after_mimp = m.end()+distance
			#ir_dict 0=start position, 1=end position, 2=motif sequence^location, 3=ORF-search-sequence
			#ir_dict[i] = [m.start()+1, m.end(), seq_record.seq[m.start():m.end()], seq_record.seq[m.end():end_pos_after_mimp]]
			#region_record = SeqRecord(seq=ir_dict[i][3],
			#	id='sc' +new_id+ '| '+ 'mimp_downstreamregion:' + str(ir_dict[i][1]+1) + '_' + str(end_pos_after_mimp) + ' (strand: +)'+ ' ' + str(ir_dict[i][2])+'^'+str(m.start()+1)+'-'+str(m.end()),
			#	description='')
			#datahandler_list.append(region_record)
			#print '   >' + region_record.id
			i+=1

			'''if m.start()-400 > 0:   ### uncomment this and comment the next if statement if you want to limit the region in 
				region_to_find_TIR_mate_coord1 = m.start()-400   #which your TIRs can be found in
				region_to_find_TIR_mate_coord2 = m.start()
				region_to_find_TIR_mate = seq_record.seq[region_to_find_TIR_mate_coord1:region_to_find_TIR_mate_coord2]
			else:
			'''
			if True==True:
				region_to_find_TIR_mate_coord1 = 0
				region_to_find_TIR_mate_coord2 = m.start()
				region_to_find_TIR_mate = seq_record.seq[region_to_find_TIR_mate_coord1:region_to_find_TIR_mate_coord2]
			
			match_TIR_mate=''
			match_TIR_mate = re.finditer(motiefje_rc, str(region_to_find_TIR_mate))

			mimp_completeness = False
			mimp_fasta_record = ''
			for TIR_mate in match_TIR_mate:
				mimp_completeness = True
				location_of_mimp_coord1=region_to_find_TIR_mate_coord1+TIR_mate.start()
				location_of_mimp_coord2=m.end()
				mimp_sequence=seq_record.seq[location_of_mimp_coord1:location_of_mimp_coord2]

			#if match_TIR_mate==True:
			#	ir_dict[i] = [m.start()+1, m.end(), seq_record.seq[m.start():m.end()], seq_record.seq[m.end():end_pos_after_mimp]]
			#	region_record = SeqRecord(seq=ir_dict[i][3],
			#		id='sc' +new_id+ '| '+ 'mimp_downstreamregion:' + str(ir_dict[i][1]+1) + '_' + str(end_pos_after_mimp) + ' (strand: +)'+ ' ' + str(ir_dict[i][2])+'^'+str(m.start()+1)+'-'+str(m.end()),
			#		description='')
			#	datahandler_list.append(region_record)
			#	print '   >' + region_record.id

			if mimp_completeness:
				nrofcompletemimps+=0.5 # 0.5 will also be added in the reverse complement part of the script
				complete_mimp_counter+=1
				mimp_fasta_record = '>'+infilename+'_mimp_'+str(complete_mimp_counter)+' _contig_'+new_id+'('+str(location_of_mimp_coord1)+':'+str(location_of_mimp_coord2)+')\n'+str(mimp_sequence)+'\n'
				with open(mimpsequencesfile,'a') as mimpsequencesfilewriter:
					mimpsequencesfilewriter.write(mimp_fasta_record)
				#####
				data_point='>'+infilename+'_mimp_'+str(complete_mimp_counter)+' _contig_'+new_id+'('+str(location_of_mimp_coord1)+':'+str(location_of_mimp_coord2)+')'
				#print data_point, '\n', to_examine[0]
				for x in to_examine:
					if data_point in x.replace('\n',''):
						ir_dict[i] = [m.start()+1, m.end(), seq_record.seq[m.start():m.end()], seq_record.seq[m.end():end_pos_after_mimp]]
						region_record = SeqRecord(seq=ir_dict[i][3],
							id='sc' +new_id+ '| '+ 'mimp_downstreamregion:' + str(ir_dict[i][1]+1) + '_' + str(end_pos_after_mimp) + ' (strand: +)'+ ' ' + str(ir_dict[i][2])+'^'+str(m.start()+1)+'-'+str(m.end()),
							description='')
						datahandler_list.append(region_record)
						print '   >' + region_record.id


				#####
			else:
				nrofincompletemimps+=1


		for m in match_rc:
			if m.start() <= distance: #ensure that no negative value will arise
				start_pos_before_mimp = 0
			else:
				start_pos_before_mimp = m.start()-distance
			#ir_dict[n] = [m.start()+1, m.end(), seq_record.seq[m.start():m.end()], seq_record.seq[start_pos_before_mimp:m.start()]]
			#region_record = SeqRecord(seq=ir_dict[n][3].reverse_complement(),  #make RC of selected area of 2000bp
			#	id='sc' +new_id+ '| '+ 'mimp_upstreamregion:' + str(start_pos_before_mimp) + '_' + str(ir_dict[n][0]-1) + ' (strand: -, rev. transc.)'+ ' ' + str(ir_dict[n][2].reverse_complement())+'^'+str(m.start()+1)+'-'+str(m.end()),
			#	description='')
			#datahandler_list.append(region_record)
			#print '   >' + region_record.id
			n+=1


			'''if m.end()+400 < len(seq_record.seq):
				region_to_find_TIR_mate = seq_record.seq[m.end():m.end()+400]
			else:
			'''
			if True==True:
				region_to_find_TIR_mate = seq_record.seq[m.end():len(seq_record.seq)]

			match_TIR_mate = re.finditer(motiefje, str(region_to_find_TIR_mate))
			mimp_completeness = False
			for TIR_mate in match_TIR_mate:
				mimp_completeness = True

			#if mimp_completeness ==True:
			#	ir_dict[n] = [m.start()+1, m.end(), seq_record.seq[m.start():m.end()], seq_record.seq[start_pos_before_mimp:m.start()]]
			#	region_record = SeqRecord(seq=ir_dict[n][3].reverse_complement(),  #make RC of selected area of 2000bp
			#		id='sc' +new_id+ '| '+ 'mimp_upstreamregion:' + str(start_pos_before_mimp) + '_' + str(ir_dict[n][0]-1) + ' (strand: -, rev. transc.)'+ ' ' + str(ir_dict[n][2].reverse_complement())+'^'+str(m.start()+1)+'-'+str(m.end()),
			#		description='')
			#	datahandler_list.append(region_record)
			#	print '   >' + region_record.id

			if mimp_completeness:
				nrofcompletemimps+=0.5
				ir_dict[n] = [m.start()+1, m.end(), seq_record.seq[m.start():m.end()], seq_record.seq[start_pos_before_mimp:m.start()]]
				######
				#region_record = SeqRecord(seq=ir_dict[n][3].reverse_complement(),  #make RC of selected area of 2000bp
				#	id='sc' +new_id+ '| '+ 'mimp_upstreamregion:' + str(start_pos_before_mimp) + '_' + str(ir_dict[n][0]-1) + ' (strand: -, rev. transc.)'+ ' ' + str(ir_dict[n][2].reverse_complement())+'^'+str(m.start()+1)+'-'+str(m.end()),
				#	description='')
				#datahandler_list.append(region_record)
				#print '   >' + region_record.id
			else:
				nrofincompletemimps+=1
